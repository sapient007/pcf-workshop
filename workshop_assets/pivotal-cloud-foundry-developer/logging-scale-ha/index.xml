<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Logging-scale-has on Pivotal Cloud Foundry Developer</title>
    <link>/pivotal-cloud-foundry-developer/logging-scale-ha/</link>
    <description>Recent content in Logging-scale-has on Pivotal Cloud Foundry Developer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Â© Copyright Pivotal. All rights reserved.</copyright>
    <lastBuildDate>Mon, 07 Mar 2016 15:49:50 -0600</lastBuildDate>
    <atom:link href="/pivotal-cloud-foundry-developer/logging-scale-ha/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Instructor Notes</title>
      <link>/pivotal-cloud-foundry-developer/logging-scale-ha/notes/</link>
      <pubDate>Mon, 07 Mar 2016 15:49:50 -0600</pubDate>
      
      <guid>/pivotal-cloud-foundry-developer/logging-scale-ha/notes/</guid>
      <description>

&lt;h1 id=&#34;questions:db235fc914867ffea6b540c8732499d5&#34;&gt;Questions&lt;/h1&gt;

&lt;p&gt;After completing the lab recap as a class the following questions:&lt;/p&gt;

&lt;h2 id=&#34;general-discussion-questions:db235fc914867ffea6b540c8732499d5&#34;&gt;General Discussion Questions&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; &lt;em&gt;What are some fundamental changes impacting application design and delivery?&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;A:&lt;/strong&gt; Distributed Computing, Ephemeral Infrastructure, and Immutable Infrastructure.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; &lt;em&gt;What is a modern methodology for delivering cloud based applications?&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;A:&lt;/strong&gt; The Twelve-Factor App.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; &lt;em&gt;How are logs handled in a Twelve-Factor app?&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;A:&lt;/strong&gt; As event streams.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; &lt;em&gt;Is a Twelve-Factor App stateful?&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;A:&lt;/strong&gt; No.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; &lt;em&gt;True or false.  Garden is an interface with many implementations.&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;A:&lt;/strong&gt; True.  Linux, Windows and runC.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; &lt;em&gt;Which component of the Elastic Runtime exposes an API for users to manage applications?&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;A:&lt;/strong&gt;  Cloud Controller.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; &lt;em&gt;What are the four levels of HA that keep our applications running?&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;A:&lt;/strong&gt; Availability Zones, Bosh Managed Processes, Failed VMs and Self Healing App Instances.&lt;/p&gt;

&lt;h2 id=&#34;questions-from-the-lab:db235fc914867ffea6b540c8732499d5&#34;&gt;Questions From the Lab&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; &lt;em&gt;Where should your application write logs?&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;A:&lt;/strong&gt; &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; &lt;em&gt;What are some of the different origin codes seen in the log?&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;A:&lt;/strong&gt; Discuss the &lt;a href=&#34;http://docs.pivotal.io/pivotalcf/devguide/deploy-apps/streaming-logs.html#format&#34;&gt;codes&lt;/a&gt; and how they map to parts/phases of the Elastic Runtime.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; &lt;em&gt;How does this change how you access logs today? At scale?&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;A:&lt;/strong&gt; The purpose of the question is to expose how much easier and faster it is to get logs this way.  Just picture having to &lt;code&gt;scp&lt;/code&gt; log files from 15 servers to diagnose what&amp;rsquo;s wrong with your app.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; &lt;em&gt;What is the difference between scaling out versus scaling up?&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;A:&lt;/strong&gt; Scaling up requires disposing of running containers and creating new containers.  Scaling out just spins up additional containers.  Key point is that containers are immutable.  Secondary point is that Scaling up does incur downtime unless doing a blue-green deployment.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; &lt;em&gt;How do you recover failing application instances today?&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;A:&lt;/strong&gt; There is no correct answer.  This is to facilitate discussion and underscore the value of the platform.  Hopefully, someone mentions an old antiquated way of doing things.  If not, tell your own story about how this would have helped you on XYZ project.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; &lt;em&gt;What effect does replacing failed application instances have on your application design?&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;A:&lt;/strong&gt; The key here is that the platform does not try to fix the broken app.  It throws it away and creates a new one.  Because of this (and other reasons) don&amp;rsquo;t keep state in the app tier.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; &lt;em&gt;How could you determine if your application has been crashing?&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;A:&lt;/strong&gt; &lt;code&gt;cf events&lt;/code&gt;&lt;/p&gt;

&lt;h1 id=&#34;troubleshooting:db235fc914867ffea6b540c8732499d5&#34;&gt;Troubleshooting&lt;/h1&gt;

&lt;p&gt;Troubleshooting guidance for the lab that instructors need to know.&lt;/p&gt;

&lt;h1 id=&#34;feedback:db235fc914867ffea6b540c8732499d5&#34;&gt;Feedback&lt;/h1&gt;

&lt;p&gt;Please keep track of all types of feedback, so that we can make this module great.  That includes questions that students may ask that we should be answering up front, lab corrections/improvements, etc.&lt;/p&gt;

&lt;p&gt;Submit feedback to: &lt;a href=&#34;mailto:pcf-developer-instructor-feedback@pivotal.io&#34;&gt;pcf-developer-instructor-feedback@pivotal.io&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Logging, Scale, and HA</title>
      <link>/pivotal-cloud-foundry-developer/logging-scale-ha/</link>
      <pubDate>Mon, 07 Mar 2016 15:49:50 -0600</pubDate>
      
      <guid>/pivotal-cloud-foundry-developer/logging-scale-ha/</guid>
      <description>

&lt;p&gt;Estimated Time: 30 minutes&lt;/p&gt;

&lt;h1 id=&#34;requirements:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Requirements&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;/pivotal-cloud-foundry-developer/pivotal-cloud-foundry-developer/requirements&#34;&gt;Lab Requirements&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;what-you-will-learn:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;What you will learn&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;How to access application logs&lt;/li&gt;
&lt;li&gt;How to scale an application&lt;/li&gt;
&lt;li&gt;How to access events&lt;/li&gt;
&lt;li&gt;How Pivotal Cloud Foundry handles failed application instances&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;exercises:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Exercises&lt;/h1&gt;

&lt;h2 id=&#34;push-the-articulate-application:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Push the &lt;code&gt;articulate&lt;/code&gt; application&lt;/h2&gt;

&lt;p&gt;1) &lt;a href=&#34;/pivotal-cloud-foundry-developer/pivotal-cloud-foundry-developer/resources/demo-apps/articulate-0.0.1-SNAPSHOT.jar&#34;&gt;Download&lt;/a&gt; the &lt;code&gt;articulate&lt;/code&gt; application.  Copy the file to folder: &lt;code&gt;~/pivotal-cloud-foundry-developer-workshop/articulate/&lt;/code&gt; (&lt;code&gt;~&lt;/code&gt; is shorthand for the home directory in Linux, Mac and Unix based operating systems).  You will need to create this directory in your &lt;a href=&#34;https://en.wikipedia.org/wiki/Home_directory&#34;&gt;home&lt;/a&gt; directory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;NOTE:&lt;/em&gt;&lt;/strong&gt; If your browser warns you about downloading this file please proceed to download it.&lt;/p&gt;

&lt;p&gt;&lt;a href=https://github.com/pivotal-enablement/articulate target=&#34;_blank&#34;&gt;Source&lt;/a&gt; is not required, but you may be curious how it works as you move through the labs.&lt;/p&gt;

&lt;p&gt;2) Push the &lt;code&gt;articulate&lt;/code&gt; application.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd ~/pivotal-cloud-foundry-developer-workshop/articulate/
$ cf push articulate -p ./articulate-0.0.1-SNAPSHOT.jar -m 512M --random-route --no-start
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;access-articulate-logs:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Access &lt;code&gt;articulate&lt;/code&gt; logs&lt;/h2&gt;

&lt;p&gt;1) Review the documentation on &lt;a href=http://docs.pivotal.io/pivotalcf/devguide/deploy-apps/streaming-logs.html target=&#34;_blank&#34;&gt;application logging&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;2) Tail the logs of the &lt;code&gt;articulate&lt;/code&gt; application.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cf logs articulate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3) Open &lt;em&gt;another&lt;/em&gt; terminal window and start the &lt;code&gt;articulate&lt;/code&gt; application.  Review the output from both terminal windows.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cf start articulate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4) Open a browser and view the &lt;code&gt;articulate&lt;/code&gt; application.  Read about our demo application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/pivotal-cloud-foundry-developer/pivotal-cloud-foundry-developer/resources/images/articulate.png&#34; alt=&#34;Articulate&#34; title=&#34;Articulate&#34; /&gt;&lt;/p&gt;

&lt;p&gt;5) Observe the log output when the &lt;code&gt;articulate&lt;/code&gt; web page is refreshed.  More logs are added!&lt;/p&gt;

&lt;p&gt;6) Stop tailing logs&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Go to the terminal tailing the logs&lt;/li&gt;
&lt;li&gt;Send an interrupt (Control + c)&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;questions:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Questions&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Where should your application write logs?&lt;/li&gt;
&lt;li&gt;What are some of the different origin codes seen in the log?&lt;/li&gt;
&lt;li&gt;How does this change how you access logs today?  At scale?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;access-articulate-events:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Access &lt;code&gt;articulate&lt;/code&gt; events&lt;/h2&gt;

&lt;p&gt;Events for the application can also be used to compliment the logs in determining what has occurred with an application.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cf events articulate
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;scale-articulate:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Scale &lt;code&gt;articulate&lt;/code&gt;&lt;/h2&gt;

&lt;h3 id=&#34;scale-up:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Scale up&lt;/h3&gt;

&lt;p&gt;1) Start tailing the logs again.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[mac, linux]
$ cf logs articulate | grep &amp;quot;API\|CELL&amp;quot;

[windows]
$ cf logs articulate | findstr &amp;quot;API CELL&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above statement filters only matching log lines from the &lt;a href=https://docs.pivotal.io/pivotalcf/concepts/architecture/cloud-controller.html target=&#34;_blank&#34;&gt;Cloud Controller&lt;/a&gt; and &lt;a href=https://docs.pivotal.io/pivotalcf/concepts/architecture/#diego-cell target=&#34;_blank&#34;&gt;Cell&lt;/a&gt; components.&lt;/p&gt;

&lt;p&gt;2) In &lt;em&gt;another&lt;/em&gt; terminal window scale &lt;code&gt;articulate&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cf scale articulate -m 1G
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3) Observe log output.&lt;/p&gt;

&lt;p&gt;4) Stop tailing the logs.&lt;/p&gt;

&lt;p&gt;5) Scale &lt;code&gt;articulate&lt;/code&gt; back to our original settings.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cf scale articulate -m 512M
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;scale-out:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Scale out&lt;/h3&gt;

&lt;p&gt;1) Browse to the &lt;code&gt;Scale and HA&lt;/code&gt; page of the &lt;code&gt;articulate&lt;/code&gt; application.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/pivotal-cloud-foundry-developer/pivotal-cloud-foundry-developer/resources/images/scale_ha.png&#34; alt=&#34;Scale and HA&#34; title=&#34;Scale and HA&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Review the &lt;code&gt;Application Environment Information&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;2) Press the &lt;code&gt;Refresh&lt;/code&gt; button multiple times.  All requests are going to one application instance.&lt;/p&gt;

&lt;p&gt;3) Start tailing the logs.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[mac, linux]
$ cf logs articulate | grep &#39;API\|CELL&#39;

[windows]
$ cf logs articulate | findstr &amp;quot;API CELL&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4) In another terminal window, scale the &lt;code&gt;articulate&lt;/code&gt; application.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cf scale articulate -i 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5) Observe log output.  Then stop tailing the logs.&lt;/p&gt;

&lt;p&gt;6) Return to &lt;code&gt;articulate&lt;/code&gt; in a web browser.  Press the &lt;code&gt;Refresh&lt;/code&gt; button several times. Observe the &lt;code&gt;Addresses&lt;/code&gt; and &lt;code&gt;Instance Index&lt;/code&gt; changing.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Notice how quickly the new application instances are provisioned and subsequently load balanced!&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;questions-1:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Questions&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;What is the difference between scaling out versus scaling up?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;high-availability:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;High Availability&lt;/h2&gt;

&lt;p&gt;Pivotal Cloud Foundry has &lt;a href=https://blog.pivotal.io/pivotal-cloud-foundry/products/the-four-levels-of-ha-in-pivotal-cf target=&#34;_blank&#34;&gt;4 levels of HA&lt;/a&gt; (High Availability) that keep your applications and the underlying platform running.  In this section, we will demonstrate one of them.  Failed application instances will be recovered.&lt;/p&gt;

&lt;p&gt;1) At this time you should be running multiple instances of &lt;code&gt;articulate&lt;/code&gt;.  Confirm this with the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cf app articulate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2) Return to &lt;code&gt;articulate&lt;/code&gt; in a web browser (&lt;code&gt;Scale and HA&lt;/code&gt; page).  Press the &lt;code&gt;Refresh&lt;/code&gt; button. Confirm the application is running.&lt;/p&gt;

&lt;p&gt;3) Kill the app.  Press the &lt;code&gt;Kill&lt;/code&gt; button!&lt;/p&gt;

&lt;p&gt;4) Check the state of the app through the &lt;code&gt;cf&lt;/code&gt; CLI.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cf app articulate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sample output below (notice the &lt;code&gt;requested state&lt;/code&gt; vs actual &lt;code&gt;state&lt;/code&gt;).  In this case, Pivotal Cloud Foundry had already detected the failure and is starting a new instance.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;requested state: started
instances: 3/3
usage: 512M x 3 instances
urls: articulate.pcfi1.fe.gopivotal.com
last uploaded: Mon Mar 21 20:27:57 UTC 2016
stack: cflinuxfs2
buildpack: java-buildpack=v3.5.1-offline-http://github.com/pivotal-cf/pcf-java-buildpack.git#d6c19f8 java-main open-jdk-like-jre=1.8.0_65 open-jdk-like-memory-calculator=2.0.1_RELEASE spring-auto-reconfiguration=1.10.0_RELEASE

     state      since                    cpu     memory           disk           details   
#0   starting   2016-03-21 04:16:23 PM   0.0%    692K of 512M     93.4M of 1G       
#1   running    2016-03-21 03:28:58 PM   0.5%    410.4M of 512M   158.8M of 1G      
#2   running    2016-03-21 04:15:57 PM   23.9%   357.8M of 512M   158.8M of 1G    

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Repeat this command as necessary until &lt;code&gt;state&lt;/code&gt; = &lt;code&gt;running&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;5) In your browser, &lt;code&gt;Refresh&lt;/code&gt; the &lt;code&gt;articulate&lt;/code&gt; application.&lt;/p&gt;

&lt;p&gt;The app is back up!&lt;/p&gt;

&lt;p&gt;A new, healthy app instance has been automatically provisioned to replace the failing one.&lt;/p&gt;

&lt;p&gt;6) View which instance was killed.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cf events articulate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;7)  Scale &lt;code&gt;articulate&lt;/code&gt; back to our original settings.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cf scale articulate -i 1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;questions-2:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Questions&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;How do you recover failing application instances today?&lt;/li&gt;
&lt;li&gt;What effect does this have on your application design?&lt;/li&gt;
&lt;li&gt;How could you determine if your application has been crashing?&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;beyond-the-class:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Beyond the class&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Try the same exercises, but using Apps Manager instead&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>