<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Service-brokers on Pivotal Cloud Foundry Developer</title>
    <link>/pivotal-cloud-foundry-developer/service-broker/</link>
    <description>Recent content in Service-brokers on Pivotal Cloud Foundry Developer</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Copyright Pivotal. All rights reserved.</copyright>
    <lastBuildDate>Wed, 09 Mar 2016 15:01:51 -0600</lastBuildDate>
    <atom:link href="/pivotal-cloud-foundry-developer/service-broker/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Amazon Web Services MongoDB AMI</title>
      <link>/pivotal-cloud-foundry-developer/service-broker/aws-mongo-ami/</link>
      <pubDate>Wed, 09 Mar 2016 15:01:51 -0600</pubDate>
      
      <guid>/pivotal-cloud-foundry-developer/service-broker/aws-mongo-ami/</guid>
      <description>

&lt;h1 id=&#34;mongodb-vm:e3a90e3eeca409f0c02afd6669b4d295&#34;&gt;MongoDB VM&lt;/h1&gt;

&lt;p&gt;A MongoDB VM (Ubuntu 14.04) is available to complete the service broker lab.  The VM is hosted on Amazon Web Services.&lt;/p&gt;

&lt;h2 id=&#34;requirements:e3a90e3eeca409f0c02afd6669b4d295&#34;&gt;Requirements&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Network connectivity and access to reach the Mongo VM (uses port &lt;code&gt;27017&lt;/code&gt;) from your Pivotal Cloud Foundry environment&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;installed-software:e3a90e3eeca409f0c02afd6669b4d295&#34;&gt;Installed Software&lt;/h2&gt;

&lt;p&gt;The software listed below has been installed and configured on the VM:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MongoDB - &lt;a href=https://www.mongodb.com/community/licensing target=&#34;_blank&#34;&gt;License&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;provisioning:e3a90e3eeca409f0c02afd6669b4d295&#34;&gt;Provisioning&lt;/h2&gt;

&lt;p&gt;1) User must have access to an AWS account (can run from any account)&lt;/p&gt;

&lt;p&gt;2) User must have an existing key pair in the account or create one&lt;/p&gt;

&lt;p&gt;3) The AMI can be found be searching for &lt;code&gt;mongodb-service-broker-lab&lt;/code&gt; in the EC2 Dashboard.  Must be in the N. Virginia region.&lt;/p&gt;

&lt;p&gt;Using the EC2 dashboard, under Images &amp;gt; AMIs search for &lt;code&gt;mongodb-service-broker-lab&lt;/code&gt;. Click Launch.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/pivotal-cloud-foundry-developer/pivotal-cloud-foundry-developer/resources/images/search.png&#34; alt=&#34;search for ami&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;provisioning-wizard:e3a90e3eeca409f0c02afd6669b4d295&#34;&gt;Provisioning Wizard&lt;/h3&gt;

&lt;p&gt;When launching, accept defaults except where specified.&lt;/p&gt;

&lt;h4 id=&#34;choose-an-instance-type:e3a90e3eeca409f0c02afd6669b4d295&#34;&gt;Choose an Instance Type&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;t2.large&lt;/code&gt; (8 GB memory)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;configure-instance-details:e3a90e3eeca409f0c02afd6669b4d295&#34;&gt;Configure Instance Details&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Auto-assign Public IP  = &lt;code&gt;Enable&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;add-storage:e3a90e3eeca409f0c02afd6669b4d295&#34;&gt;Add Storage&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Accept defaults&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;tag-instance:e3a90e3eeca409f0c02afd6669b4d295&#34;&gt;Tag Instance&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Create the following: Key = &lt;code&gt;Name&lt;/code&gt;; Value = &lt;code&gt;&amp;lt;your name here-mongodb-service-broker&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;create-a-security-group:e3a90e3eeca409f0c02afd6669b4d295&#34;&gt;Create a Security Group&lt;/h4&gt;

&lt;p&gt;Create a security group with the following rules:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rule 1:&lt;/strong&gt; &lt;br&gt;
 Type = &lt;code&gt;ssh&lt;/code&gt; &lt;br&gt;
 Protocol = &lt;code&gt;TCP&lt;/code&gt; &lt;br&gt;
 Port Range = &lt;code&gt;22&lt;/code&gt; &lt;br&gt;
 Source = &lt;code&gt;anywhere&lt;/code&gt; (0.0.0.0/0) &lt;br&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rule 2:&lt;/strong&gt; &lt;br&gt;
  Type = &lt;code&gt;Custom TCP Rule&lt;/code&gt; &lt;br&gt;
  Protocol = &lt;code&gt;TCP&lt;/code&gt; &lt;br&gt;
  Port Range = &lt;code&gt;27017&lt;/code&gt; &lt;br&gt;
  Source = &lt;code&gt;anywhere&lt;/code&gt; (0.0.0.0/0) &lt;br&gt;&lt;/p&gt;

&lt;h4 id=&#34;review-instance-launch:e3a90e3eeca409f0c02afd6669b4d295&#34;&gt;Review Instance Launch&lt;/h4&gt;

&lt;p&gt;Select your key-pair and launch the instance.&lt;/p&gt;

&lt;p&gt;Once the instance is running, select it in list of EC2 instances. &lt;strong&gt;&lt;em&gt;Obtain the public IP for use in the lab&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&#34;accessing-your-mongo-vm-remotely:e3a90e3eeca409f0c02afd6669b4d295&#34;&gt;Accessing Your Mongo VM Remotely&lt;/h2&gt;

&lt;p&gt;SSH using your private key, the &lt;code&gt;ubuntu&lt;/code&gt; user and the public IP address of your VM.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ssh -i ~/.ssh/my-key-pair.pem ubuntu@53.91.185.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/AccessingInstancesLinux.html target=&#34;_blank&#34;&gt;Amazon Reference Documentation&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;managing-mongodb:e3a90e3eeca409f0c02afd6669b4d295&#34;&gt;Managing MongoDB&lt;/h2&gt;

&lt;h3 id=&#34;start-mongodb:e3a90e3eeca409f0c02afd6669b4d295&#34;&gt;Start MongoDB&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ sudo service mongod start
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;stop-mongodb:e3a90e3eeca409f0c02afd6669b4d295&#34;&gt;Stop MongoDB&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ sudo service mongod stop
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;restart-mongodb:e3a90e3eeca409f0c02afd6669b4d295&#34;&gt;Restart MongoDB&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ sudo service mongod restart
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;the-mongo-shell:e3a90e3eeca409f0c02afd6669b4d295&#34;&gt;The Mongo Shell&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;mongo&lt;/code&gt; shell is also loaded on the VM.  It can be accessed in the terminal by doing the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mongo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=https://docs.mongodb.org/manual/mongo/ target=&#34;_blank&#34;&gt;Mongo Shell Reference&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Service Broker</title>
      <link>/pivotal-cloud-foundry-developer/service-broker/</link>
      <pubDate>Wed, 09 Mar 2016 15:01:51 -0600</pubDate>
      
      <guid>/pivotal-cloud-foundry-developer/service-broker/</guid>
      <description>

&lt;p&gt;Estimated Time: 60 minutes&lt;/p&gt;

&lt;h1 id=&#34;requirements:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Requirements&lt;/h1&gt;

&lt;p&gt;&lt;a href=&#34;/pivotal-cloud-foundry-developer/pivotal-cloud-foundry-developer/requirements&#34;&gt;Lab Requirements&lt;/a&gt;&lt;/p&gt;

&lt;h1 id=&#34;what-you-will-learn:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;What you will learn&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;How to implement the Service Broker API&lt;/li&gt;
&lt;li&gt;How to deploy a service broker as an app to Pivotal Cloud Foundry&lt;/li&gt;
&lt;li&gt;How to register the service broker with the Cloud Controller&lt;/li&gt;
&lt;li&gt;How to make the single plan in the catalog “public” in your organization&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;exercises:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Exercises&lt;/h1&gt;

&lt;h2 id=&#34;setup:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Setup&lt;/h2&gt;

&lt;p&gt;1) Download the &lt;a href=&#34;/pivotal-cloud-foundry-developer/pivotal-cloud-foundry-developer/resources/demo-apps/cloudfoundry-mongodb-service-broker.zip&#34;&gt;zip file&lt;/a&gt;.  The zip file contains source code and jar ready for you to deploy (no building necessary).  Copy the file to folder: &lt;code&gt;~/pivotal-cloud-foundry-developer-workshop/&lt;/code&gt; (&lt;code&gt;~&lt;/code&gt; is shorthand for the home directory in Linux, Mac and Unix based operating systems).  You will need to create this directory in your &lt;a href=https://en.wikipedia.org/wiki/Home_directory target=&#34;_blank&#34;&gt;home&lt;/a&gt; directory.&lt;/p&gt;

&lt;p&gt;2) Extract the the zip file to &lt;code&gt;~/pivotal-cloud-foundry-developer-workshop/cloudfoundry-mongodb-service-broker&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;3) OPTIONAL STEP - Import applications into your IDE such as &lt;a href=https://spring.io/tools target=&#34;_blank&#34;&gt;Spring Tool Suite&lt;/a&gt; (STS).&lt;/p&gt;

&lt;p&gt;STS Import Help:&lt;/p&gt;

&lt;p&gt;Select File &amp;gt; Import… Then select Gradle &amp;gt; Gradle Project. On the Import Gradle Project page, browse to the directory where you extracted the zip.  Then push the &amp;ldquo;Build Model&amp;rdquo; button.  Select the project.  Click &amp;ldquo;Finish&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;The above steps require the &lt;code&gt;Grade Support&lt;/code&gt; IDE extension to be installed. To install &lt;code&gt;Gradle Support&lt;/code&gt; select Help &amp;gt; Dashboard.  This will open a new tab to the Dashboard.  Click on &amp;ldquo;IDE Extensions&amp;rdquo; then search for &amp;ldquo;Gradle&amp;rdquo;.  Select &lt;code&gt;Gradle Support&lt;/code&gt; or &lt;code&gt;Gradle (STS Legacy) Support&lt;/code&gt; and click the &amp;ldquo;Install&amp;rdquo; button.  Complete the installation wizard and restart STS.&lt;/p&gt;

&lt;h2 id=&#34;service-broker-api-overview:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Service Broker API Overview&lt;/h2&gt;

&lt;p&gt;1) Review the &lt;a href=http://docs.pivotal.io/pivotalcf/services/api.html#api-overview target=&#34;_blank&#34;&gt;documentation&lt;/a&gt;.  Specifically, the sequence diagram.  This is what we will implement.&lt;/p&gt;

&lt;h2 id=&#34;create-a-mongodb-service-broker:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Create a MongoDB Service Broker&lt;/h2&gt;

&lt;h3 id=&#34;about-this-broker:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;About this Broker&lt;/h3&gt;

&lt;p&gt;This broker is implemented with Spring Boot and leverages the &lt;a href=https://github.com/spring-cloud/spring-cloud-cloudfoundry-service-broker target=&#34;_blank&#34;&gt;Spring Cloud Service Broker&lt;/a&gt; project.  As a result, a lot of the work has been done for us.  In a nutshell, this means that Service Broker endpoints have been mapped (provided) but there a few beans and interfaces we need to implement to complete a broker implementation.&lt;/p&gt;

&lt;h3 id=&#34;implement-catalog-management:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Implement Catalog Management&lt;/h3&gt;

&lt;p&gt;1) Review the documentation on &lt;a href=http://docs.pivotal.io/pivotalcf/services/api.html#catalog-mgmt target=&#34;_blank&#34;&gt;implementing catalog management&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;2) We need to implement catalog management in our &lt;code&gt;mongodb-service-broker&lt;/code&gt; application.  Fortunately, all the Service Broker API endpoints have been mapped by the Spring Cloud Service Broker project.  For instance, the  &lt;a href=https://github.com/spring-cloud/spring-cloud-cloudfoundry-service-broker/blob/master/src/main/java/org/springframework/cloud/servicebroker/controller/CatalogController.java target=&#34;_blank&#34;&gt;&lt;code&gt;v2/catalog&lt;/code&gt; endpoint&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;3) We have an endpoint, but the Spring Cloud Service Broker can&amp;rsquo;t provide all the implementation.  We need to describe our catalog.  To to that, all we need to do is provide a &lt;code&gt;Catalog&lt;/code&gt; bean.&lt;/p&gt;

&lt;p&gt;Review the following file: &lt;code&gt;~/pivotal-cloud-foundry-developer-workshop/cloudfoundry-mongodb-service-broker/src/main/java/org/springframework/cloud/servicebroker/mongodb/config/CatalogConfig.java&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Configuration
public class CatalogConfig {

  @Bean
  public Catalog catalog() {
    return new Catalog(Collections.singletonList(
        new ServiceDefinition(
            getEnvOrDefault(&amp;quot;SERVICE_ID&amp;quot;,&amp;quot;mongodb-service-broker&amp;quot;), //env variable
            getEnvOrDefault(&amp;quot;SERVICE_NAME&amp;quot;,&amp;quot;MongoDB&amp;quot;), //env variable
            &amp;quot;A simple MongoDB service broker implementation&amp;quot;,
            true,
            false,
            Collections.singletonList(
                new Plan(getEnvOrDefault(&amp;quot;PLAN_ID&amp;quot;,&amp;quot;mongo-plan&amp;quot;), //env variable
                    &amp;quot;standard&amp;quot;,
                    &amp;quot;This is a default mongo plan.  All services are created equally.&amp;quot;,
                    getPlanMetadata())),
            Arrays.asList(&amp;quot;mongodb&amp;quot;, &amp;quot;document&amp;quot;),
            getServiceDefinitionMetadata(),
            null,
            null)));
  }
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4) Push the &lt;code&gt;mongodb-service-broker&lt;/code&gt; application.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd ~/pivotal-cloud-foundry-developer-workshop/cloudfoundry-mongodb-service-broker/
$ cf push mongodb-service-broker -p build/libs/cloudfoundry-mongodb-service-broker.jar -m 512M --random-route --no-start
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5) Set environment variables.&lt;/p&gt;

&lt;p&gt;These environment variables get used by the broker to generate the catalog.  These values should be unique across the entire Pivotal Cloud Foundry instance to meet the broker API specifications.&lt;/p&gt;

&lt;p&gt;As a convention, append your initials to where specified.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cf set-env mongodb-service-broker SERVICE_ID mongodb-service-broker-&amp;lt;initials&amp;gt;
$ cf set-env mongodb-service-broker SERVICE_NAME MongoDB-&amp;lt;initials&amp;gt;
$ cf set-env mongodb-service-broker PLAN_ID mongo-plan-&amp;lt;initials&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cf set-env mongodb-service-broker SERVICE_ID mongodb-service-broker-dnr
$ cf set-env mongodb-service-broker SERVICE_NAME MongoDB-dnr
$ cf set-env mongodb-service-broker PLAN_ID mongo-plan-dnr
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;You can safely ignore the &amp;ldquo;TIP: Use &amp;lsquo;cf restage&amp;rsquo; to ensure your env variable changes take effect&amp;rdquo; message.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;6) Start &lt;code&gt;mongodb-service-broker&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cf start mongodb-service-broker
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;7) Verify your work.  Call the application &lt;code&gt;v2/catalog&lt;/code&gt; endpoint through a browser.  Because the application is secured with Basic Auth you will need to provide credentials.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Username:&lt;/strong&gt; pivotal &lt;br&gt;
&lt;strong&gt;Password:&lt;/strong&gt; keepitsimple&lt;/p&gt;

&lt;p&gt;You should see response similar to the following (pic is using the &lt;a href=https://chrome.google.com/webstore/detail/json-formatter/bcjindcccaagfpapjjmafapmmgkkhgoa?hl=en target=&#34;_blank&#34;&gt;JSON Formatter for Chrome&lt;/a&gt;):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/pivotal-cloud-foundry-developer/pivotal-cloud-foundry-developer/resources/images/catalog.png&#34; alt=&#34;Catalog&#34; title=&#34;Catalog&#34; /&gt;&lt;/p&gt;

&lt;p&gt;8) Register your Service Broker.&lt;/p&gt;

&lt;p&gt;We will be creating a &lt;a href=http://docs.pivotal.io/pivotalcf/services/managing-service-brokers.html target=&#34;_blank&#34;&gt;Space-Scoped&lt;/a&gt; broker.  Space-Scoped brokers help you during the development/testing of your service broker, because they are private to a space and don&amp;rsquo;t require an &lt;code&gt;admin&lt;/code&gt; to enable access (list it in the marketplace, provision service instances, etc).&lt;/p&gt;

&lt;p&gt;A unique broker name is required.  Use your initials.&lt;/p&gt;

&lt;p&gt;For Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cf create-service-broker mongodb-service-broker-dnr pivotal keepitsimple https://mongodb-service-broker-pert-dagger.pcfi1.fe.gopivotal.com --space-scoped
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;9) View the Service Brokers in your installation. You should see your new Service Broker.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cf service-brokers
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;10) View service access.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cf service-access
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Notice that your service access is set to &lt;code&gt;none&lt;/code&gt;, because this is space-scoped broker.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;11) Verify that your service is listed in the marketplace.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cf marketplace
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Congratulations, you have implemented and tested the catalog endpoint in your service broker!&lt;/p&gt;

&lt;h4 id=&#34;questions:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Questions&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Can a service broker support upgrade/downgrade of a service?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;implement-provisioning-and-deprovisioning:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Implement Provisioning and Deprovisioning&lt;/h3&gt;

&lt;p&gt;1) Review the documentation on implementing &lt;a href=http://docs.pivotal.io/pivotalcf/services/api.html#provisioning target=&#34;_blank&#34;&gt;provisioning&lt;/a&gt; and &lt;a href=http://docs.pivotal.io/pivotalcf/services/api.html#deprovisioning target=&#34;_blank&#34;&gt;deprovisioning&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;2) We need to implement provisioning/deprovisioning in our &lt;code&gt;mongodb-service-broker&lt;/code&gt; application. To do so we just need to implement the &lt;a href=https://github.com/spring-cloud/spring-cloud-cloudfoundry-service-broker/blob/master/src/main/java/org/springframework/cloud/servicebroker/service/ServiceInstanceService.java target=&#34;_blank&#34;&gt;ServiceInstanceService&lt;/a&gt; interface, because the Spring Cloud Service Broker project has already done the &lt;a href=https://github.com/spring-cloud/spring-cloud-cloudfoundry-service-broker/blob/master/src/main/java/org/springframework/cloud/servicebroker/controller/ServiceInstanceController.java target=&#34;_blank&#34;&gt;mapping&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Review the following file: &lt;code&gt;~/pivotal-cloud-foundry-developer-workshop/cloudfoundry-mongodb-service-broker/src/main/java/org/springframework/cloud/servicebroker/mongodb/service/MongoServiceInstanceService.java&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Provisioning Code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Service
public class MongoServiceInstanceService implements ServiceInstanceService {
...

  @Override
  public CreateServiceInstanceResponse createServiceInstance(CreateServiceInstanceRequest request) {
    // make sure we haven&#39;t provisioned this before (check broker database)
    ServiceInstance instance = repository.findOne(request.getServiceInstanceId());
    if (instance != null) {
      throw new ServiceInstanceExistsException(request.getServiceInstanceId(), request.getServiceDefinitionId());
    }

    instance = new ServiceInstance(request);

    if (mongo.databaseExists(instance.getServiceInstanceId())) {
      // ensure the instance is empty
      mongo.deleteDatabase(instance.getServiceInstanceId());
    }

    DB db = mongo.createDatabase(instance.getServiceInstanceId());
    if (db == null) {
      throw new ServiceBrokerException(&amp;quot;Failed to create new DB instance: &amp;quot; + instance.getServiceInstanceId());
      }
    //save to broker database for record keeping
    repository.save(instance);

    return new CreateServiceInstanceResponse();
  }
...

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;What&amp;rsquo;s happening?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;createServiceInstance&lt;/code&gt; method is where our broker provisions the database.  But to do so two things must happen:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Record details in the broker database that we are provisioning a service instance (a MongoDB database)&lt;/li&gt;
&lt;li&gt;Create the database&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Deprovisioning Code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Service
public class MongoServiceInstanceService implements ServiceInstanceService {
...
  @Override
  public DeleteServiceInstanceResponse deleteServiceInstance(DeleteServiceInstanceRequest request) throws   MongoServiceException {
    String instanceId = request.getServiceInstanceId();
    //locate record in broker database
    ServiceInstance instance = repository.findOne(instanceId);
    if (instance == null) {
      throw new ServiceInstanceDoesNotExistException(instanceId);
    }

    // delete mongo database
    mongo.deleteDatabase(instanceId);
    // delete record from broker database
    repository.delete(instanceId);
    return new DeleteServiceInstanceResponse();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;What&amp;rsquo;s happening?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;deleteServiceInstance&lt;/code&gt; method is where our broker deprovisions the database.  But to do so two things must happen:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Delete the database&lt;/li&gt;
&lt;li&gt;Delete the record of the service instance in the broker database&lt;/li&gt;
&lt;/ol&gt;

&lt;h4 id=&#34;questions-1:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Questions&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;The broker is required by the Cloud Controller to respond within how many seconds?&lt;/li&gt;
&lt;li&gt;Does provisioning have to be done synchronously?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;implement-binding-and-unbinding:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Implement Binding and Unbinding&lt;/h3&gt;

&lt;p&gt;1) Review the documentation on implementing &lt;a href=http://docs.pivotal.io/pivotalcf/services/api.html#binding target=&#34;_blank&#34;&gt;binding&lt;/a&gt; and &lt;a href=http://docs.pivotal.io/pivotalcf/services/api.html#unbinding target=&#34;_blank&#34;&gt;unbinding&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;2) We need to implement binding/unbinding in our &lt;code&gt;mongodb-service-broker&lt;/code&gt; application. To do so we just need to implement the &lt;a href=https://github.com/spring-cloud/spring-cloud-cloudfoundry-service-broker/blob/master/src/main/java/org/springframework/cloud/servicebroker/service/ServiceInstanceBindingService.java target=&#34;_blank&#34;&gt;ServiceInstanceBindingService&lt;/a&gt; interface, because the Spring Cloud Service Broker project has already done the &lt;a href=https://github.com/spring-cloud/spring-cloud-cloudfoundry-service-broker/blob/master/src/main/java/org/springframework/cloud/servicebroker/controller/ServiceInstanceBindingController.java target=&#34;_blank&#34;&gt;mapping&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Review the following file: &lt;code&gt;~/pivotal-cloud-foundry-developer-workshop/cloudfoundry-mongodb-service-broker/src/main/java/org/springframework/cloud/servicebroker/mongodb/service/MongoServiceInstanceBindingService.java&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Binding Code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Service
public class MongoServiceInstanceBindingService implements ServiceInstanceBindingService {
...
  @Override
  public CreateServiceInstanceBindingResponse createServiceInstanceBinding(CreateServiceInstanceBindingRequest request) {

    String bindingId = request.getBindingId();
    String serviceInstanceId = request.getServiceInstanceId();

    ServiceInstanceBinding binding = bindingRepository.findOne(bindingId);
    if (binding != null) {
      throw new ServiceInstanceBindingExistsException(serviceInstanceId, bindingId);
    }

    String database = serviceInstanceId;
    String username = bindingId;
    String password = &amp;quot;password&amp;quot;;


    mongo.createUser(database, username, password);

    Map&amp;lt;String, Object&amp;gt; credentials =
        Collections.singletonMap(&amp;quot;uri&amp;quot;, (Object) mongo.getConnectionString(database, username, password));

    binding = new ServiceInstanceBinding(bindingId, serviceInstanceId, credentials, null, request.getBoundAppGuid());
    bindingRepository.save(binding);

    return new CreateServiceInstanceAppBindingResponse().withCredentials(credentials);
  }
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;What&amp;rsquo;s happening?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;createServiceInstanceBinding&lt;/code&gt; method is where our broker binds an application to the provisioned service instance (database).  But to do so two things must happen:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Create a unique set of credentials for this binding request in MongoDB&lt;/li&gt;
&lt;li&gt;Create a record of the binding in the broker database&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Unbinding Code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Service
public class MongoServiceInstanceBindingService implements ServiceInstanceBindingService {

  @Override
  public void deleteServiceInstanceBinding(DeleteServiceInstanceBindingRequest request) {
    String bindingId = request.getBindingId();
    ServiceInstanceBinding binding = getServiceInstanceBinding(bindingId);

    if (binding == null) {
      throw new ServiceInstanceBindingDoesNotExistException(bindingId);
    }

    mongo.deleteUser(binding.getServiceInstanceId(), bindingId);
    bindingRepository.delete(bindingId);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;What&amp;rsquo;s happening?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;deleteServiceInstanceBinding&lt;/code&gt; method is where our broker unbinds an application to the provisioned service instance (database).  But to do so two things must happen:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Delete the credentials (user) for this binding request in MongoDB&lt;/li&gt;
&lt;li&gt;Delete the record of the binding in the broker database&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Congratulations! You have created a simple service broker.&lt;/p&gt;

&lt;h4 id=&#34;questions-2:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Questions&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Do all services have to be bindable?&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;use-the-mongodb-service-broker:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Use the MongoDB Service Broker&lt;/h2&gt;

&lt;p&gt;1) Configure the &lt;code&gt;mongodb-service-broker&lt;/code&gt; application to use a MongoDB instance.&lt;/p&gt;

&lt;p&gt;A MongoDB instance can be obtained in the following ways:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Your instructor will provision MongoDB and provide connectivity details to you&lt;/li&gt;
&lt;li&gt;Use a MongoDB instance in your environment&lt;/li&gt;
&lt;li&gt;Provision a &lt;a href=&#34;/pivotal-cloud-foundry-developer/pivotal-cloud-foundry-developer/service-broker/aws-mongo-ami&#34;&gt;MongoDB instance on AWS&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Make sure to obtain the IP address of your MongoDB instance before moving forward.  The broker will attempt to connect to MongoDB  on port 27017.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt; MongoDB security configuration should not be enabled (&lt;code&gt;security.authorization = false&lt;/code&gt;).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cf set-env mongodb-service-broker MONGODB_HOST &amp;lt;IP-ADDRESS&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;You can safely ignore the &amp;ldquo;TIP: Use &amp;lsquo;cf restage&amp;rsquo; to ensure your env variable changes take effect&amp;rdquo; message.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;2) Restart the application.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cf restart mongodb-service-broker
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3) Download &lt;a href=&#34;/pivotal-cloud-foundry-developer/pivotal-cloud-foundry-developer/resources/demo-apps/spring-music.war&#34;&gt;Spring-Music&lt;/a&gt;.  Copy the file to folder: &lt;code&gt;~/pivotal-cloud-foundry-developer-workshop/spring-music/&lt;/code&gt; (&lt;code&gt;~&lt;/code&gt; is shorthand for the home directory in Linux, Mac and Unix based operating systems).  You will need to create this directory in your &lt;a href=https://en.wikipedia.org/wiki/Home_directory target=&#34;_blank&#34;&gt;home&lt;/a&gt; directory.&lt;/p&gt;

&lt;p&gt;4) Push &lt;code&gt;spring-music&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd ~/pivotal-cloud-foundry-developer-workshop/spring-music/
$ cf push spring-music -p ./spring-music.war -m 512M --random-route
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5) View &lt;code&gt;spring-music&lt;/code&gt; in a browser.  Click on the &lt;code&gt;i&lt;/code&gt; button on the top right of the screen.  Notice that there are no services attached and &lt;code&gt;spring-music&lt;/code&gt; is using an embedded database.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/pivotal-cloud-foundry-developer/pivotal-cloud-foundry-developer/resources/images/spring-music-initial.png&#34; alt=&#34;Spring Music - Embedded DB&#34; title=&#34;Spring Music - Embedded DB&#34; /&gt;&lt;/p&gt;

&lt;p&gt;6) Create a MongoDB service instance.&lt;/p&gt;

&lt;p&gt;For Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cf create-service MongoDB-dnr standard mongo-service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;7) Bind the &lt;code&gt;spring-music&lt;/code&gt; to &lt;code&gt;mongo-service&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cf bind-service spring-music mongo-service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;You can safely ignore the &amp;ldquo;TIP: Use &amp;lsquo;cf restage spring-music&amp;rsquo; to ensure your env variable changes take effect&amp;rdquo; message.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;8) Restart &lt;code&gt;spring-music&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cf restart spring-music
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;9) Refresh &lt;code&gt;spring-music&lt;/code&gt; in the browser.  Click on the &lt;code&gt;i&lt;/code&gt; button in the top right of the screen.  You are now using MongoDB!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/pivotal-cloud-foundry-developer/pivotal-cloud-foundry-developer/resources/images/spring-music-mongo.png&#34; alt=&#34;Spring Music - MongoDB&#34; title=&#34;Spring Music - MongoDB&#34; /&gt;&lt;/p&gt;

&lt;p&gt;10) &lt;strong&gt;Optional Step:&lt;/strong&gt; If you have access.  View the data in MongoDB.&lt;/p&gt;

&lt;h2 id=&#34;clean-up:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Clean up&lt;/h2&gt;

&lt;p&gt;1) Delete &lt;code&gt;spring-music&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cf delete spring-music
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2) Delete the &lt;code&gt;mongo-service&lt;/code&gt; service instance.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cf delete-service mongo-service
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3) Delete the service broker.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cf delete-service-broker mongodb-service-broker-dnr
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4) Delete &lt;code&gt;mongodb-service-broker&lt;/code&gt; application.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cf delete mongodb-service-broker
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5) If provisioned, terminate the AWS mongodb instance.&lt;/p&gt;

&lt;h1 id=&#34;beyond-the-class:d680e8a854a7cbad6d490c445cba2eba&#34;&gt;Beyond the class&lt;/h1&gt;

&lt;p&gt;Review other &lt;a href=http://docs.pivotal.io/pivotalcf/services/examples.html target=&#34;_blank&#34;&gt;sample brokers&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Service Broker</title>
      <link>/pivotal-cloud-foundry-developer/service-broker/php-lab/</link>
      <pubDate>Wed, 09 Mar 2016 15:01:51 -0600</pubDate>
      
      <guid>/pivotal-cloud-foundry-developer/service-broker/php-lab/</guid>
      <description>

&lt;p&gt;Estimated Time: 60 minutes&lt;/p&gt;

&lt;h1 id=&#34;requirements:841784ecf13a5dea7af69e1b5dd9bcf6&#34;&gt;Requirements&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;/pivotal-cloud-foundry-developer/pivotal-cloud-foundry-developer/requirements&#34;&gt;Lab Requirements&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;what-you-will-learn:841784ecf13a5dea7af69e1b5dd9bcf6&#34;&gt;What you will learn&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;How to implement the Service Broker API&lt;/li&gt;
&lt;li&gt;How to deploy a service broker as an app to Pivotal Cloud Foundry&lt;/li&gt;
&lt;li&gt;How to register the service broker with the Cloud Controller&lt;/li&gt;
&lt;li&gt;How to make the single plan in the catalog “public” in your organization&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;exercises:841784ecf13a5dea7af69e1b5dd9bcf6&#34;&gt;Exercises&lt;/h1&gt;

&lt;h2 id=&#34;service-broker-api-overview:841784ecf13a5dea7af69e1b5dd9bcf6&#34;&gt;Service Broker API Overview&lt;/h2&gt;

&lt;p&gt;1) Review the &lt;a href=&#34;http://docs.pivotal.io/pivotalcf/services/api.html#api-overview&#34;&gt;documentation&lt;/a&gt;.  Specifically, the sequence diagram.  This is what we will implement.&lt;/p&gt;

&lt;h2 id=&#34;create-a-simple-broker:841784ecf13a5dea7af69e1b5dd9bcf6&#34;&gt;Create a Simple Broker&lt;/h2&gt;

&lt;p&gt;1) Inside of the directory of your choice (like your &lt;code&gt;home&lt;/code&gt; directory), create a &lt;code&gt;mybroker&lt;/code&gt; directory. The &lt;code&gt;mybroker&lt;/code&gt; directory will contain an application that provides a service (more on that below) and implements the Service Broker API.&lt;/p&gt;

&lt;p&gt;For the service itself, it will get the time of today’s sunset in Paris from the Yahoo Weather API.&lt;/p&gt;

&lt;p&gt;2) Place the following code in an &lt;code&gt;index.php&lt;/code&gt; file directly in the &lt;code&gt;mybroker&lt;/code&gt; directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
header(&#39;Content-type: application/json&#39;);

$BASE_URL = &amp;quot;http://query.yahooapis.com/v1/public/yql&amp;quot;;
$yql_query = &#39;select astronomy.sunset from weather.forecast where woeid in (select woeid from geo.places(1) where text=&amp;quot;paris&amp;quot;)&#39;;
$yql_query_url = $BASE_URL . &amp;quot;?q=&amp;quot; . urlencode($yql_query) . &amp;quot;&amp;amp;format=json&amp;quot;;

$session = curl_init($yql_query_url);
curl_setopt($session, CURLOPT_RETURNTRANSFER,true);
echo curl_exec($session);
curl_close($session);
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3) Push the &lt;code&gt;mybroker&lt;/code&gt; application.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cf push mybroker -m 128M --random-route
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Make sure you are in the &lt;code&gt;mybroker&lt;/code&gt; directory.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;4) Using a browser, verify that your service returns JSON containing the sunset time of Paris.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/pivotal-cloud-foundry-developer/pivotal-cloud-foundry-developer/resources/images/json_sunset.png&#34; alt=&#34;Sunset JSON&#34; title=&#34;Sunset JSON&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;implement-catalog-management:841784ecf13a5dea7af69e1b5dd9bcf6&#34;&gt;Implement Catalog Management&lt;/h3&gt;

&lt;p&gt;1) Review the documentation on &lt;a href=&#34;http://docs.pivotal.io/pivotalcf/services/api.html#catalog-mgmt&#34;&gt;implementing catalog management&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;2) Inside of your &lt;code&gt;mybroker&lt;/code&gt; directory, create the following directory structure: &lt;code&gt;v2/catalog&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;IMPORTANT NOTE:&lt;/em&gt;&lt;/strong&gt; The &lt;code&gt;v2&lt;/code&gt; directory is where we will implement the Service Broker API endpoints!&lt;/p&gt;

&lt;p&gt;3) Inside of the &lt;code&gt;v2/catalog&lt;/code&gt; directory, create an &lt;code&gt;index.php&lt;/code&gt; file with the JSON shown below. You will use that JSON as a starting point for your Service Broker.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
header(&#39;Content-type: application/json&#39;);
$service_guid = &#39;CHANGE_ME&#39;; //change to a random value (letters and numbers only)
$plan_guid = &#39;CHANGE_ME&#39;; //change to a random value (letters and numbers only)
$dashboard_guid = &#39;CHANGE_ME&#39;; //change to a random value (letters and numbers only)
$service_name = &#39;paris-sunset-&#39;; //append your initials to the end

echo
&#39;{
  &amp;quot;services&amp;quot;: [{
    &amp;quot;id&amp;quot;:&#39; .json_encode($service_guid).&#39;,
    &amp;quot;name&amp;quot;:&#39;.json_encode($service_name).&#39;,
    &amp;quot;description&amp;quot;: &amp;quot;Provide the time of today\&#39;s sunset in Paris&amp;quot;,
    &amp;quot;bindable&amp;quot;: true,
    &amp;quot;plans&amp;quot;: [{
      &amp;quot;id&amp;quot;:&#39;.json_encode($plan_guid).&#39;,
      &amp;quot;name&amp;quot;: &amp;quot;small&amp;quot;,
      &amp;quot;description&amp;quot;: &amp;quot;limited requests&amp;quot;
    }],
    &amp;quot;dashboard_client&amp;quot;: {
      &amp;quot;id&amp;quot;:&#39;.json_encode($dashboard_guid).&#39;,
      &amp;quot;secret&amp;quot;: &amp;quot;secret-1&amp;quot;,
      &amp;quot;redirect_uri&amp;quot;: &amp;quot;https://dashboard.service.com&amp;quot;
    }
  }]
}&#39;;
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4) Change the values for the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$service_guid&lt;/code&gt;, &lt;code&gt;$plan_guid&lt;/code&gt;, &lt;code&gt;$dashboard_guid&lt;/code&gt;.  Come up with something unique.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$service_name&lt;/code&gt; append your initials to &lt;code&gt;paris-sunset-&lt;/code&gt; (e.g. &lt;code&gt;paris-sunset-dnr&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;5) &lt;strong&gt;Directly in the &lt;code&gt;mybroker&lt;/code&gt; directory&lt;/strong&gt;, create a file named &lt;code&gt;.htaccess&lt;/code&gt; containing the following text. This file is used to redirect any request to &lt;code&gt;v2/catalog*&lt;/code&gt; (where the * represents any string of characters) to the &lt;code&gt;v2/catalog/index.php&lt;/code&gt; file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RewriteEngine on
DirectorySlash off

RewriteCond %{REQUEST_FILENAME} !-f
RewriteRule ^v2/catalog(.*)$ v2/catalog/index.php [L]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;6) Push the &lt;code&gt;mybroker&lt;/code&gt; application.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Make sure you are in the &lt;code&gt;mybroker&lt;/code&gt; directory.&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cf push mybroker
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;7) Append &lt;code&gt;v2/catalog&lt;/code&gt; to the url of the &lt;code&gt;mybroker&lt;/code&gt; application and verify that you can see the JSON.&lt;/p&gt;

&lt;p&gt;Also ensure that &lt;code&gt;v2/catalog/&lt;/code&gt; and &lt;code&gt;v2/catalog/anything&lt;/code&gt; resolves to the JSON.&lt;/p&gt;

&lt;p&gt;You have implemented the catalog management portion of the Service Broker API!&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;/pivotal-cloud-foundry-developer/pivotal-cloud-foundry-developer/resources/images/catalog.png&#34; alt=&#34;Catalog Endpoint&#34; title=&#34;Catalog Endpoint&#34; /&gt;&lt;/p&gt;

&lt;p&gt;8) Register your Service Broker.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Notes:&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;This command must be done with the &lt;code&gt;admin&lt;/code&gt; account.  If you don&amp;rsquo;t have access, ask your administrator!&lt;/li&gt;
&lt;li&gt;A unique broker name is required. If using a shared environment make sure to use something unique like appending your initials to the application name.&lt;/li&gt;
&lt;li&gt;For simplicity we have not used basic authentication, so any user name and password can be used. This is not recommended for a production Service Broker.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cf create-service-broker mybroker-dnr user password https://mybroker-hyperscholastic-arcana.pcfi1.fe.gopivotal.com
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;9) View the Service Brokers in your installation. You should see your new Service Broker.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt; This command must be done with the &lt;code&gt;admin&lt;/code&gt; account.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cf service-brokers
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;10) View the marketplace&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cf marketplace
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;The service isn&amp;rsquo;t listed.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;11) View service access.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt; This command must be done with the &lt;code&gt;admin&lt;/code&gt; account.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cf service-access
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Notice that your service access (i.e. paris-sunset-dnr) is set to &lt;code&gt;none&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;12) Enable access.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt; This command must be done with the &lt;code&gt;admin&lt;/code&gt; account.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cf enable-service-access paris-sunset-dnr
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;13) Verify that your service is now available when using cf marketplace. Also verify that your service is visible in the Marketplace of Apps Manager.&lt;/p&gt;

&lt;p&gt;Congratulations, you have implemented and tested the catalog endpoint in your service broker!&lt;/p&gt;

&lt;h4 id=&#34;questions:841784ecf13a5dea7af69e1b5dd9bcf6&#34;&gt;Questions&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Can a service broker support upgrade/downgrade of a service?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;implement-provisioning:841784ecf13a5dea7af69e1b5dd9bcf6&#34;&gt;Implement Provisioning&lt;/h3&gt;

&lt;p&gt;1) Review the documentation on implementing &lt;a href=&#34;http://docs.pivotal.io/pivotalcf/services/api.html#provisioning&#34;&gt;provisioning&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;2) Inside of your &lt;code&gt;mybroker/v2/&lt;/code&gt; directory, create a &lt;code&gt;service_instances&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;3) Inside of the &lt;code&gt;service_instances&lt;/code&gt; directory, create an &lt;code&gt;index.php&lt;/code&gt; file with the following contents.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt; this Service Broker doesn’t actually provision any resources.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
header(&#39;Content-type: application/json&#39;);

echo &#39;{}&#39;;
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4) In the &lt;code&gt;mybroker&lt;/code&gt; directory, modify the contents of the file named &lt;code&gt;.htaccess&lt;/code&gt; to contain the following text. This file is used to redirect any request to &lt;code&gt;v2/service_instances*&lt;/code&gt; (where the * represents any string of characters) to the &lt;code&gt;v2/service_instances/index.php&lt;/code&gt; file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RewriteEngine on
DirectorySlash off

RewriteCond %{REQUEST_FILENAME} !-f
RewriteRule ^v2/catalog(.*)$ v2/catalog/index.php [L]

RewriteCond %{REQUEST_FILENAME} !-f
RewriteRule ^v2/service_instances(.*)$ v2/service_instances/index.php [L]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Note:&lt;/em&gt;&lt;/strong&gt; the result of this redirection will result in implementing many other Service Broker API methods (deprovisioning, binding and unbinding) that we will flesh out more later.&lt;/p&gt;

&lt;p&gt;5) Push the &lt;code&gt;mybroker&lt;/code&gt; application.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Make sure you are in the &lt;code&gt;mybroker&lt;/code&gt; directory.&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cf push mybroker
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;6) Append &lt;code&gt;v2/service_instances&lt;/code&gt; to the url of the &lt;code&gt;mybroker&lt;/code&gt; application and verify that the result of provisioning the service is empty JSON (i.e. &lt;code&gt;{}&lt;/code&gt;). Also ensure that &lt;code&gt;v2/service_instances/&lt;/code&gt; and &lt;code&gt;v2/service_instances/anything&lt;/code&gt; resolves to the same content.&lt;/p&gt;

&lt;p&gt;7) Create a &lt;code&gt;paris-sunset&lt;/code&gt; service instance.&lt;/p&gt;

&lt;p&gt;For Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cf create-service paris-sunset-dnr small paris-sunset
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;8) View all service instances.  Confirm that &lt;code&gt;paris-sunset&lt;/code&gt; is listed.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cf services
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;9) Bind the &lt;code&gt;paris-sunset&lt;/code&gt; to &lt;code&gt;articulate&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cf bind-service articulate paris-sunset
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;10) View the &lt;code&gt;articulate&lt;/code&gt; environment.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cf env articulate
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;questions-1:841784ecf13a5dea7af69e1b5dd9bcf6&#34;&gt;Questions&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;The broker is required by the Cloud Controller to respond within how many seconds?&lt;/li&gt;
&lt;li&gt;Does provisioning have to be done synchronously?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;review-deprovisioning:841784ecf13a5dea7af69e1b5dd9bcf6&#34;&gt;Review Deprovisioning&lt;/h3&gt;

&lt;p&gt;1) Review the documentation on implementing &lt;a href=&#34;http://docs.pivotal.io/pivotalcf/services/api.html#deprovisioning&#34;&gt;deprovisioning&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We have already implemented the deprovisioning when we implemented provisioning.&lt;/p&gt;

&lt;p&gt;2) Unbind &lt;code&gt;paris-sunset&lt;/code&gt; from &lt;code&gt;articulate&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cf unbind-service articulate paris-sunset

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3) Delete the &lt;code&gt;paris-sunset&lt;/code&gt; service instance.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cf delete-service paris-sunset
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;questions-2:841784ecf13a5dea7af69e1b5dd9bcf6&#34;&gt;Questions&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;When handing a deprovisioning request if the service instance does not exist what status code should be returned?&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;implement-binding-unbinding-further:841784ecf13a5dea7af69e1b5dd9bcf6&#34;&gt;Implement Binding/Unbinding Further&lt;/h3&gt;

&lt;p&gt;Technically, our broker supports binding/unbinding right now.  However, one the most important aspects of binding has been ignored - &lt;a href=&#34;http://docs.pivotal.io/pivotalcf/services/api.html#binding-types&#34;&gt;providing unique credentials per binding&lt;/a&gt;.  Let&amp;rsquo;s resolve that.&lt;/p&gt;

&lt;p&gt;1) Review the documentation on implementing  &lt;a href=&#34;http://docs.pivotal.io/pivotalcf/services/api.html#binding&#34;&gt;binding&lt;/a&gt; and &lt;a href=&#34;http://docs.pivotal.io/pivotalcf/services/api.html#unbinding&#34;&gt;unbinding&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;2) We will use the existing &lt;code&gt;service_instances/index.php&lt;/code&gt; file as a &amp;ldquo;controller&amp;rdquo; to read the request URI and determine if this is a &lt;code&gt;provision&lt;/code&gt; request or a &lt;code&gt;binding&lt;/code&gt; request. Replace the contents of &lt;code&gt;service_instances/index.php&lt;/code&gt; with the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;?php
header(&#39;Content-type: application/json&#39;);
//check for &#39;service_bindings&#39; in the request URI (binding calls will contain this)
$pos = strpos($_SERVER[&#39;REQUEST_URI&#39;], &#39;service_bindings&#39;);

if ($pos ===false){
  //request did not contain &#39;service_bindings&#39;
  //this is a provisioning/deprovisioning request and return empty JSON
  echo &#39;{}&#39;;
} else {
  //this is a binding request
  if ($_SERVER[&#39;REQUEST_METHOD&#39;]===&#39;PUT&#39;){
    $username = uniqid();
    $password = uniqid();
    $uri = &#39;https://&#39; . $username . &#39;:&#39; . $password . &#39;@&#39;. $_SERVER[&#39;HTTP_HOST&#39;];
    echo &#39;{
        &amp;quot;credentials&amp;quot;: {
          &amp;quot;uri&amp;quot;:&#39; .json_encode($uri).&#39;,
          &amp;quot;username&amp;quot;:&#39;.json_encode($username).&#39;,
          &amp;quot;password&amp;quot;:&#39;.json_encode($password).&#39;
          }
        }&#39;;
  } else {
    // unbind request
    echo &#39;{}&#39;;
  }
}
?&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;NOTE:&lt;/em&gt;&lt;/strong&gt; Applications that bind to this service will just pass fake credentials. This is because the Yahoo API doesn’t require credentials. If the service actually required credentials (like a database), this is how you would pass them.&lt;/p&gt;

&lt;p&gt;3) Push the &lt;code&gt;mybroker&lt;/code&gt; application.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Make sure you are in the &lt;code&gt;mybroker&lt;/code&gt; directory.&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cf push mybroker
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;4) Create a &lt;code&gt;paris-sunset&lt;/code&gt; service instance.&lt;/p&gt;

&lt;p&gt;For Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cf create-service paris-sunset-dnr small paris-sunset
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;5) Bind the &lt;code&gt;paris-sunset&lt;/code&gt; to &lt;code&gt;articulate&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cf bind-service articulate paris-sunset
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;6) View the &lt;code&gt;articulate&lt;/code&gt; environment.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cf env articulate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;NOTE:&lt;/em&gt;&lt;/strong&gt; The credentials are now included.&lt;/p&gt;

&lt;p&gt;Congratulations! You have created a simple service broker.&lt;/p&gt;

&lt;h4 id=&#34;questions-3:841784ecf13a5dea7af69e1b5dd9bcf6&#34;&gt;Questions&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Do all services have to be bindable?&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;beyond-the-class:841784ecf13a5dea7af69e1b5dd9bcf6&#34;&gt;Beyond the class&lt;/h1&gt;

&lt;p&gt;There are many community resources to help you build your own more robust service broker.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Spring developers can use the &lt;a href=&#34;https://github.com/spring-cloud/spring-cloud-cloudfoundry-service-broker&#34;&gt;Spring Cloud CF Service Broker&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Apps Manager can consume additional metadata to show more information about your service (like plan price etc) see &lt;a href=&#34;http://docs.pivotal.io/pivotalcf/services/catalog-metadata.html&#34;&gt;catalog metadata&lt;/a&gt; in the docs for more information.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;You following repositories can be used as a reference:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cloudfoundry-community/s3-cf-service-broker&#34;&gt;S3 CF Service Broker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spgreenberg/spring-boot-cf-service-broker-mongo&#34;&gt;Spring Boot CF Service Broker Mongo&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Instructor Notes</title>
      <link>/pivotal-cloud-foundry-developer/service-broker/notes/</link>
      <pubDate>Mon, 07 Mar 2016 15:49:50 -0600</pubDate>
      
      <guid>/pivotal-cloud-foundry-developer/service-broker/notes/</guid>
      <description>

&lt;h1 id=&#34;questions:db235fc914867ffea6b540c8732499d5&#34;&gt;Questions&lt;/h1&gt;

&lt;p&gt;After completing the lab recap as a class the following questions:&lt;/p&gt;

&lt;h2 id=&#34;general-discussion-questions:db235fc914867ffea6b540c8732499d5&#34;&gt;General Discussion Questions&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; &lt;em&gt;Where does a service broker have to be be deployed?&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;A:&lt;/strong&gt; The broker can be deployed provided the Cloud Controller can reach it via HTTPS.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; &lt;em&gt;Why provide unique credentials per binding?&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;A:&lt;/strong&gt; So that unbinding (revoking access) doesn&amp;rsquo;t affect multiple applications.&lt;/p&gt;

&lt;h2 id=&#34;questions-from-the-lab:db235fc914867ffea6b540c8732499d5&#34;&gt;Questions From the Lab&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; &lt;em&gt;Can a service broker support upgrade/downgrade of a service instance to a different plan?&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;A:&lt;/strong&gt; Upgrade is supported.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; &lt;em&gt;The broker is required by the Cloud Controller to respond within how many seconds?&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;A:&lt;/strong&gt; 60 seconds.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; &lt;em&gt;Does provisioning have to be done synchronously?&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;A:&lt;/strong&gt; No, it can be done asynchronously.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Q:&lt;/strong&gt; &lt;em&gt;Do all services have to be bindable?&lt;/em&gt;&lt;br&gt;
&lt;strong&gt;A:&lt;/strong&gt; No.  Need an example here.&lt;/p&gt;

&lt;h1 id=&#34;troubleshooting:db235fc914867ffea6b540c8732499d5&#34;&gt;Troubleshooting&lt;/h1&gt;

&lt;p&gt;Troubleshooting guidance for the lab that instructors need to know.&lt;/p&gt;

&lt;h2 id=&#34;name-and-id-collisions:db235fc914867ffea6b540c8732499d5&#34;&gt;Name and Id Collisions&lt;/h2&gt;

&lt;p&gt;Make sure that students set the environment variables to unique values for the entire platform, otherwise they won&amp;rsquo;t be able to create/register their service broker.&lt;/p&gt;

&lt;h2 id=&#34;purge-when-necessary:db235fc914867ffea6b540c8732499d5&#34;&gt;Purge When Necessary&lt;/h2&gt;

&lt;p&gt;If a student&amp;rsquo;s service broker/service instance/bindings get completely messed up and normal methods no longer work (&lt;code&gt;create-service&lt;/code&gt;, &lt;code&gt;bind-service&lt;/code&gt;, &lt;code&gt;unbind-service&lt;/code&gt;, &lt;code&gt;delete-service&lt;/code&gt;) there are  options to essentially reset things.&lt;/p&gt;

&lt;p&gt;For instance, if they can&amp;rsquo;t delete/unbind a service instance consider the following methods (does not require &lt;code&gt;admin&lt;/code&gt; for Spaced-Scoped Brokers):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// removes one service instance and associated bindings
$ cf purge-service-instance
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;//removes the service from the marketplace and all service instances with associated bindings
$ cf purge-service-offering
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;feedback:db235fc914867ffea6b540c8732499d5&#34;&gt;Feedback&lt;/h1&gt;

&lt;p&gt;Please keep track of all types of feedback, so that we can make this module great.  That includes questions that students may ask that we should be answering up front, lab corrections/improvements, etc.&lt;/p&gt;

&lt;p&gt;Submit feedback to: &lt;a href=&#34;mailto:pcf-developer-instructor-feedback@pivotal.io&#34;&gt;pcf-developer-instructor-feedback@pivotal.io&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>